-------------------------
//EJERCICIO 1: "personal"
-------------------------
1. Obtener los datos completos de los empleados.
SELECT * FROM empleado;

2. Obtener los datos completos de los departamentos.
SELECT * FROM departamento;

3. Listar el nombre de los departamentos.
SELECT nombre_depto FROM departamento;

4. Obtener el nombre y salario de todos los empleados.
SELECT nombre, salario FROM empleado;

5. Listar todas las comisiones.
SELECT comision FROM empleado;

6. Obtener los datos de los empleados cuyo cargo sea ‘Secretaria’.
SELECT * FROM empleado
WHERE cargo='secretaria';

7. Obtener los datos de los empleados vendedores, ordenados por nombre alfabéticamente.
SELECT * FROM empleado
WHERE cargo='vendedor' 
ORDER BY nombre ASC;

8. Obtener el nombre y cargo de todos los empleados, ordenados por salario de menor a mayor.
SELECT nombre, cargo, salario FROM empleado
ORDER BY salario ASC;

9. Elabore un listado donde para cada fila, figure el alias ‘Nombre’ y ‘Cargo’ para las respectivas tablas de empleados.
SELECT nombre AS Nombre, cargo AS Cargo FROM empleado;

10. Listar los salarios y comisiones de los empleados del departamento 2000, ordenado por comisión de menor a mayor.
SELECT comision, salario FROM empleado
WHERE id_depto='2000'
ORDER BY comision ASC;

11. Obtener el valor total a pagar que resulta de sumar el salario y la comisión de los empleados del departamento 3000 una bonificación de 500, en orden alfabético del empleado.
SELECT nombre, (comision+salario+500), id_depto FROM empleado
WHERE id_depto='3000'
ORDER BY nombre ASC;
	
12. Muestra los empleados cuyo nombre empiece con la letra J.
SELECT nombre FROM empleado
WHERE nombre 
LIKE 'j%';

13. Listar el salario, la comisión, el salario total (salario + comisión) y nombre, de aquellos empleados que tienen comisión superior a 1000.
SELECT nombre, comision, (salario + comision) FROM empleado
WHERE comision>1000;

14. Obtener un listado similar al anterior, pero de aquellos empleados que NO tienen comisión.
SELECT nombre, salario, comision, (salario + comision) FROM empleado
WHERE comision=0;

15. Obtener la lista de los empleados que ganan una comisión superior a su sueldo.
SELECT nombre, salario, comision FROM empleado
WHERE comision>salario;

16. Listar los empleados cuya comisión es menor o igual que el 30% de su sueldo.
SELECT nombre, salario, comision FROM empleado
WHERE comision<=(salario*30/100);

17. Hallar los empleados cuyo nombre no contiene la cadena “MA”
SELECT nombre FROM empleado
WHERE nombre NOT LIKE '%ma%'
ORDER BY nombre ASC;

18. Obtener los nombres de los departamentos que sean “Ventas”, “Investigación” y ‘Mantenimiento.
SELECT nombre_depto FROM departamento
WHERE nombre_depto NOT IN ('ventas', 'Investigación', 'Mantenimiento');

19. Ahora obtener los nombres de los departamentos que no sean “Ventas” ni
“Investigación” ni ‘Mantenimiento.
SELECT nombre_depto FROM departamento
WHERE nombre_depto IN ('ventas', 'Investigación', 'Mantenimiento');

20. Mostrar el salario más alto de la empresa.
SELECT nombre, cargo, MAX(salario) FROM empleado;


21. Mostrar el nombre del último empleado de la lista por orden alfabético.
SELECT nombre FROM empleado
ORDER BY nombre DESC
LIMIT 1;

22. Hallar el salario más alto, el más bajo y la diferencia entre ellos.
SELECT MAX(salario)"SALARIO MAX", MIN(salario)"SALARIO MIN", (SELECT (MAX(salario)-MIN(salario)))"DIFERENCIA"  FROM empleado;

23. Hallar el salario promedio por departamento.
SELECT id_depto, nombre, AVG(salario) FROM empleado 
GROUP BY id_depto
ORDER BY id_depto ASC;

---------------------
Consultas con Having
---------------------
24. Hallar los departamentos que tienen más de tres empleados. Mostrar el número de empleados de esos departamentos.
SELECT COUNT(id_empleado)"N° EMPLEADOS", id_depto"DEPTO" FROM empleado 
GROUP BY id_depto
HAVING COUNT(id_empleado)>3;

25. Mostrar el código y nombre de cada jefe, junto al número de empleados que dirige. Solo los que tengan más de dos empleados (2 incluido).

26. Hallar los departamentos que no tienen empleados.

-------------------------
Consulta con Subconsulta
-------------------------
27. Mostrar la lista de los empleados cuyo salario es mayor o igual que el promedio de la empresa. Ordenarlo por departamento.
SELECT id_depto, nombre, salario FROM empleado

WHERE salario>=(SELECT AVG(salario) FROM empleado)

ORDER BY id_depto ASC;
-----------------------------------------------------------------------------
........................................
//EJERCICIO 2:"tienda.sql"
........................................

1. Lista el nombre de todos los productos que hay en la tabla producto.
SELECT * FROM producto;


2. Lista los nombres y los precios de todos los productos de la tabla producto.
SELECT nombre, precio FROM producto;


3. Lista todas las columnas de la tabla producto.
????

4. Lista los nombres y los precios de todos los productos de la tabla producto, redondeando el valor del precio.
SELECT nombre, ROUND(precio) FROM producto;


5. Lista el código de los fabricantes que tienen productos en la tabla producto.
????

6. Lista el código de los fabricantes que tienen productos en la tabla producto, sin mostrar los repetidos.
SELECT codigo_fabricante, nombre FROM producto
GROUP BY nombre;

7. Lista los nombres de los fabricantes ordenados de forma ascendente.
SELECT nombre FROM fabricante
ORDER BY nombre ASC;

8. Lista los nombres de los productos ordenados en primer lugar por el nombre de forma ascendente y en segundo lugar por el precio de forma descendente.
SELECT fabricante.nombre, producto.precio FROM fabricante, producto
ORDER BY fabricante.nombre ASC, producto.precio DESC;

9. Devuelve una lista con las 5 primeras filas de la tabla fabricante.
SELECT * FROM fabricante
LIMIT 5;

10. Lista el nombre y el precio del producto más barato. (Utilice solamente las cláusulas ORDER BY y LIMIT)
SELECT nombre, precio FROM producto
ORDER BY precio ASC
LIMIT 1;

11. Lista el nombre y el precio del producto más caro. (Utilice solamente las cláusulas ORDER BY y LIMIT)
SELECT nombre, precio FROM producto
ORDER BY precio DESC
LIMIT 1;

12. Lista el nombre de los productos que tienen un precio menor o igual a $120.
SELECT nombre FROM producto
WHERE precio<=120;

13. Lista todos los productos que tengan un precio entre $60 y $200. Utilizando el operador BETWEEN.
SELECT nombre FROM producto
WHERE precio BETWEEN 60 AND 200;

14. Lista todos los productos donde el código de fabricante sea 1, 3 o 5. Utilizando el operador IN.
SELECT * FROM producto
WHERE codigo_fabricante IN(1, 3, 5);

15. Devuelve una lista con el nombre de todos los productos que contienen la cadena Portátil en el nombre.
SELECT nombre FROM producto
WHERE nombre LIKE '%portatil%';

......................
Consultas Multitabla
......................
1. Devuelve una lista con el código del producto, nombre del producto, código del fabricante y nombre del fabricante, de todos los productos de la base de datos.
SELECT producto.codigo"Cod. Prod", producto.nombre"Nom. Prod", codigo_fabricante"Cod. Fabr", fabricante.nombre"Nom. Fabr"  FROM producto
INNER JOIN fabricante
ON producto.codigo_fabricante=fabricante.codigo;

2. Devuelve una lista con el nombre del producto, precio y nombre de fabricante de todos los productos de la base de datos. Ordene el resultado por el nombre del fabricante, por orden alfabético.
SELECT producto.codigo"Cod. Prod", producto.nombre"Nom. Prod", codigo_fabricante"Cod. Fabr", fabricante.nombre"Nom. Fabr"  FROM producto
INNER JOIN fabricante
ON producto.codigo_fabricante=fabricante.codigo
ORDER BY fabricante.nombre ASC;

3. Devuelve el nombre del producto, su precio y el nombre de su fabricante, del producto más barato.
SELECT producto.nombre"Nom. Prod", precio"Precio. Prod", fabricante.nombre"Nom. Fabr"  FROM producto
INNER JOIN fabricante
ON producto.codigo_fabricante=fabricante.codigo
ORDER BY fabricante.nombre ASC
LIMIT 1;

4. Devuelve una lista de todos los productos del fabricante Lenovo.
SELECT producto.nombre"Nom. Prod", fabricante.nombre"Nom. Fabr"  FROM producto
INNER JOIN fabricante
ON producto.codigo_fabricante=fabricante.codigo
WHERE fabricante.nombre="lenovo";

5. Devuelve una lista de todos los productos del fabricante Crucial que tengan un precio mayor que $200.
SELECT producto.nombre"Nom. Prod", precio, fabricante.nombre"Nom. Fabr"  FROM producto
INNER JOIN fabricante
ON producto.codigo_fabricante=fabricante.codigo
WHERE fabricante.nombre="Crucial" AND precio>200;

6. Devuelve un listado con todos los productos de los fabricantes Asus, Hewlett-Packard. Utilizando el operador IN.
SELECT producto.nombre"Nom. Prod", precio, fabricante.nombre"Nom. Fabr"  FROM producto
INNER JOIN fabricante
ON producto.codigo_fabricante=fabricante.codigo
WHERE fabricante.nombre IN ("Asus", "Hewlett-Packard" );

7. Devuelve un listado con el nombre de producto, precio y nombre de fabricante, de todos los productos que tengan un precio mayor o igual a $180. Ordene el resultado en primer lugar por el precio (en orden descendente) y en segundo lugar por el nombre (en orden ascendente)
SELECT producto.nombre"Nom. Prod", precio, fabricante.nombre"Nom. Fabr"  FROM producto
INNER JOIN fabricante
ON producto.codigo_fabricante=fabricante.codigo
WHERE precio>=180;


-Consultas Multitabla
Resuelva todas las consultas utilizando las cláusulas LEFT JOIN y RIGHT JOIN.
1. Devuelve un listado de todos los fabricantes que existen en la base de datos, junto con los
productos que tiene cada uno de ellos. El listado deberá mostrar también aquellos
fabricantes que no tienen productos asociados.
2. Devuelve un listado donde sólo aparezcan aquellos fabricantes que no tienen ningún
producto asociado.
Subconsultas (En la cláusula WHERE)
Con operadores básicos de comparación
1. Devuelve todos los productos del fabricante Lenovo. (Sin utilizar INNER JOIN).
2. Devuelve todos los datos de los productos que tienen el mismo precio que el producto
más caro del fabricante Lenovo. (Sin utilizar INNER JOIN).
3. Lista el nombre del producto más caro del fabricante Lenovo.
4. Lista todos los productos del fabricante Asus que tienen un precio superior al precio
medio de todos sus productos.

-Subconsultas con IN y NOT IN
1. Devuelve los nombres de los fabricantes que tienen productos asociados. (Utilizando IN o
NOT IN).
2. Devuelve los nombres de los fabricantes que no tienen productos asociados. (Utilizando
IN o NOT IN).
Subconsultas (En la cláusula HAVING)
1. Devuelve un listado con todos los nombres de los fabricantes que tienen el mismo número
de productos que el fabricante Lenovo.